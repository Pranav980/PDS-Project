#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the maximum number of data points
#define MAX_DATA 1000

// Define structure for storing crop data
typedef struct {
    double temperature;
    double rainfall;
    double demand;
    double price;
    int year;
    char state[30];
    double population;
} CropData;

// Function to read CSV data
int readCSV(const char* filename, CropData data[], int* rows, const char* cropColumn) {
    FILE* file = fopen(filename, "r");
    
    if (!file) {
        printf("Unable to open file: %s\n", filename);
        return -1;
    }

    char line[1024];
    fgets(line, sizeof(line), file); // Skip the header
    int i = 0;

    while (fgets(line, sizeof(line), file)) {
        // Initialize values for each row
        char state[30];
        int year;
        double rice_price, wheat_price, corn_price, pulses_price, millets_price;
        double temperature, rainfall, population, selected_price;

        // Parse the CSV row (handles multiple crop prices)
        int fieldsRead = sscanf(line, "%29[^,],%d,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf",
                                state, &year, &rice_price, &wheat_price, &corn_price,
                                &pulses_price, &millets_price, &temperature, &rainfall, &population);

        if (fieldsRead == 10) {
            // Determine which price to use based on the crop
            if (strcmp(cropColumn, "Rice_Price") == 0) {
                selected_price = rice_price;
            } else if (strcmp(cropColumn, "Wheat_Price") == 0) {
                selected_price = wheat_price;
            } else if (strcmp(cropColumn, "Corn_Price") == 0) {
                selected_price = corn_price;
            } else if (strcmp(cropColumn, "Pulses_Price") == 0) {
                selected_price = pulses_price;
            } else if (strcmp(cropColumn, "Millets_Price") == 0) {
                selected_price = millets_price;
            } else {
                printf("Invalid crop column.\n");
                fclose(file);
                return -1;
            }

            // Store parsed data into the structure
            strcpy(data[i].state, state);
            data[i].year = year;
            data[i].temperature = temperature;
            data[i].rainfall = rainfall;
            data[i].population = population;
            data[i].price = selected_price;
            data[i].demand = population / 1000000.0; // Calculate demand index
            i++;
        } else {
            printf("Failed to parse line: %s\n", line); // Debug print for parse failure
        }
    }

    *rows = i;
    fclose(file);
    return 0;
}

// Function to perform multiple linear regression
void linearRegression(CropData data[], int n, double* a, double* b1, double* b2, double* b3) {
    double sumX1 = 0, sumX2 = 0, sumX3 = 0, sumY = 0;
    double sumX1Y = 0, sumX2Y = 0, sumX3Y = 0;
    double sumX1X1 = 0, sumX2X2 = 0, sumX3X3 = 0;

    for (int i = 0; i < n; i++) {
        double x1 = data[i].temperature;
        double x2 = data[i].rainfall;
        double x3 = data[i].demand;
        double y = data[i].price;

        sumX1 += x1;
        sumX2 += x2;
        sumX3 += x3;
        sumY += y;
        sumX1Y += x1 * y;
        sumX2Y += x2 * y;
        sumX3Y += x3 * y;
        sumX1X1 += x1 * x1;
        sumX2X2 += x2 * x2;
        sumX3X3 += x3 * x3;
    }

    *b1 = (n * sumX1Y - sumX1 * sumY) / (n * sumX1X1 - sumX1 * sumX1);
    *b2 = (n * sumX2Y - sumX2 * sumY) / (n * sumX2X2 - sumX2 * sumX2);
    *b3 = (n * sumX3Y - sumX3 * sumY) / (n * sumX3X3 - sumX3 * sumX3);
    *a = (sumY - (*b1) * sumX1 - (*b2) * sumX2 - (*b3) * sumX3) / n;
}

// Function to predict the price based on input parameters
double predict(double a, double b1, double b2, double b3, double temperature, double rainfall, double demand) {
    return a + b1 * temperature + b2 * rainfall + b3 * demand;
}

// Function to get demand index based on state
double getDemandIndex(CropData data[], int n, const char* state) {
    for (int i = 0; i < n; i++) {
        if (strcmp(data[i].state, state) == 0) {
            return data[i].demand;
        }
    }
    return -1;
}

// Main function
int main() {
    CropData data[MAX_DATA];
    int n;
    char crop[20];
    char state[30];
    double temperature, rainfall;

    // Get user input for crop and state
    printf("Enter crop (e.g., rice, wheat, corn): ");
    scanf("%s", crop);
    printf("Enter state (e.g., Karnataka): ");
    scanf("%s", state);
    printf("Enter temperature (in Celsius): ");
    scanf("%lf", &temperature);
    printf("Enter rainfall (in mm): ");
    scanf("%lf", &rainfall);

    // Map crop to the corresponding CSV column
    char cropColumn[20];
    if (strcmp(crop, "rice") == 0) {
        strcpy(cropColumn, "Rice_Price");
    } else if (strcmp(crop, "wheat") == 0) {
        strcpy(cropColumn, "Wheat_Price");
    } else if (strcmp(crop, "corn") == 0) {
        strcpy(cropColumn, "Corn_Price");
    } else if (strcmp(crop, "pulses") == 0) {
        strcpy(cropColumn, "Pulses_Price");
    } else if (strcmp(crop, "millets") == 0) {
        strcpy(cropColumn, "Millets_Price");
    } else {
        printf("Invalid crop entered.\n");
        return 1;
    }

    // Read data from CSV file
    if (readCSV("india_crop_data.csv", data, &n, cropColumn) == -1) {
        return 1;
    }

    double a, b1, b2, b3;

    // Perform linear regression on the entire dataset
    linearRegression(data, n, &a, &b1, &b2, &b3);

    // Get demand index based on state
    double demand = getDemandIndex(data, n, state);
    if (demand == -1) {
        printf("State not found in the data.\n");
        return 1;
    }

    // Predict the price
    double predictedPrice = predict(a, b1, b2, b3, temperature, rainfall, demand);
    printf("Predicted %s price for %s: %.2f INR/Quintal\n", crop, state, predictedPrice);

    return 0;
}
